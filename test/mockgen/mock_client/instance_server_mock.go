// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lxc/lxd/client (interfaces: InstanceServer)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	client "github.com/lxc/incus/client"
	api "github.com/lxc/incus/shared/api"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockInstanceServer is a mock of InstanceServer interface
type MockInstanceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServerMockRecorder
}

// MockInstanceServerMockRecorder is the mock recorder for MockInstanceServer
type MockInstanceServerMockRecorder struct {
	mock *MockInstanceServer
}

// NewMockInstanceServer creates a new mock instance
func NewMockInstanceServer(ctrl *gomock.Controller) *MockInstanceServer {
	mock := &MockInstanceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceServer) EXPECT() *MockInstanceServerMockRecorder {
	return m.recorder
}

// ConsoleContainer mocks base method
func (m *MockInstanceServer) ConsoleContainer(arg0 string, arg1 api.InstanceConsolePost, arg2 *client.InstanceConsoleArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleContainer indicates an expected call of ConsoleContainer
func (mr *MockInstanceServerMockRecorder) ConsoleContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleContainer", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleContainer), arg0, arg1, arg2)
}

// ConsoleInstance mocks base method
func (m *MockInstanceServer) ConsoleInstance(arg0 string, arg1 api.InstanceConsolePost, arg2 *client.InstanceConsoleArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleInstance indicates an expected call of ConsoleInstance
func (mr *MockInstanceServerMockRecorder) ConsoleInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstance", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstance), arg0, arg1, arg2)
}

// CopyContainer mocks base method
func (m *MockInstanceServer) CopyContainer(arg0 client.InstanceServer, arg1 api.Instance, arg2 *client.InstanceCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainer indicates an expected call of CopyContainer
func (mr *MockInstanceServerMockRecorder) CopyContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainer", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainer), arg0, arg1, arg2)
}

// CopyContainerSnapshot mocks base method
func (m *MockInstanceServer) CopyContainerSnapshot(arg0 client.InstanceServer, arg1 string, arg2 api.InstanceSnapshot  , arg3 *client.InstanceSnapshotCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainerSnapshot indicates an expected call of CopyContainerSnapshot
func (mr *MockInstanceServerMockRecorder) CopyContainerSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainerSnapshot), arg0, arg1, arg2, arg3)
}

// CopyImage mocks base method
func (m *MockInstanceServer) CopyImage(arg0 client.ImageServer, arg1 api.Image, arg2 *client.ImageCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage
func (mr *MockInstanceServerMockRecorder) CopyImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockInstanceServer)(nil).CopyImage), arg0, arg1, arg2)
}

// CopyInstance mocks base method
func (m *MockInstanceServer) CopyInstance(arg0 client.InstanceServer, arg1 api.Instance, arg2 *client.InstanceCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstance indicates an expected call of CopyInstance
func (mr *MockInstanceServerMockRecorder) CopyInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstance", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstance), arg0, arg1, arg2)
}

// CopyInstanceSnapshot mocks base method
func (m *MockInstanceServer) CopyInstanceSnapshot(arg0 client.InstanceServer, arg1 string, arg2 api.InstanceSnapshot, arg3 *client.InstanceSnapshotCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstanceSnapshot indicates an expected call of CopyInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) CopyInstanceSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstanceSnapshot), arg0, arg1, arg2, arg3)
}

// CopyStoragePoolVolume mocks base method
func (m *MockInstanceServer) CopyStoragePoolVolume(arg0 string, arg1 client.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *client.StoragePoolVolumeCopyArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStoragePoolVolume indicates an expected call of CopyStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) CopyStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CopyStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// CreateCertificate mocks base method
func (m *MockInstanceServer) CreateCertificate(arg0 api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate
func (mr *MockInstanceServerMockRecorder) CreateCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificate), arg0)
}

// CreateContainer mocks base method
func (m *MockInstanceServer) CreateContainer(arg0 api.InstancePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer
func (mr *MockInstanceServerMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainer), arg0)
}

// CreateContainerBackup mocks base method
func (m *MockInstanceServer) CreateContainerBackup(arg0 string, arg1 api.InstanceBackupsPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerBackup indicates an expected call of CreateContainerBackup
func (mr *MockInstanceServerMockRecorder) CreateContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerBackup), arg0, arg1)
}

// CreateContainerFile mocks base method
func (m *MockInstanceServer) CreateContainerFile(arg0, arg1 string, arg2 client.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerFile indicates an expected call of CreateContainerFile
func (mr *MockInstanceServerMockRecorder) CreateContainerFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFile), arg0, arg1, arg2)
}

// CreateContainerFromBackup mocks base method
func (m *MockInstanceServer) CreateContainerFromBackup(arg0 client.InstanceBackupArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromBackup", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromBackup indicates an expected call of CreateContainerFromBackup
func (mr *MockInstanceServerMockRecorder) CreateContainerFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromBackup), arg0)
}

// CreateContainerFromImage mocks base method
func (m *MockInstanceServer) CreateContainerFromImage(arg0 client.ImageServer, arg1 api.Image, arg2 api.InstancePost) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromImage indicates an expected call of CreateContainerFromImage
func (mr *MockInstanceServerMockRecorder) CreateContainerFromImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromImage), arg0, arg1, arg2)
}

// CreateContainerSnapshot mocks base method
func (m *MockInstanceServer) CreateContainerSnapshot(arg0 string, arg1 api.InstanceSnapshotsPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerSnapshot indicates an expected call of CreateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) CreateContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerSnapshot), arg0, arg1)
}

// CreateContainerTemplateFile mocks base method
func (m *MockInstanceServer) CreateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerTemplateFile indicates an expected call of CreateContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) CreateContainerTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerTemplateFile), arg0, arg1, arg2)
}

// CreateImage mocks base method
func (m *MockInstanceServer) CreateImage(arg0 api.ImagesPost, arg1 *client.ImageCreateArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockInstanceServerMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateImage), arg0, arg1)
}

// CreateImageAlias mocks base method
func (m *MockInstanceServer) CreateImageAlias(arg0 api.ImageAliasesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlias indicates an expected call of CreateImageAlias
func (mr *MockInstanceServerMockRecorder) CreateImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageAlias), arg0)
}

// CreateImageSecret mocks base method
func (m *MockInstanceServer) CreateImageSecret(arg0 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageSecret", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageSecret indicates an expected call of CreateImageSecret
func (mr *MockInstanceServerMockRecorder) CreateImageSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageSecret), arg0)
}

// CreateInstance mocks base method
func (m *MockInstanceServer) CreateInstance(arg0 api.InstancesPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockInstanceServerMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstance), arg0)
}

// CreateInstanceBackup mocks base method
func (m *MockInstanceServer) CreateInstanceBackup(arg0 string, arg1 api.InstanceBackupsPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceBackup indicates an expected call of CreateInstanceBackup
func (mr *MockInstanceServerMockRecorder) CreateInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceBackup), arg0, arg1)
}

// CreateInstanceFile mocks base method
func (m *MockInstanceServer) CreateInstanceFile(arg0, arg1 string, arg2 client.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceFile indicates an expected call of CreateInstanceFile
func (mr *MockInstanceServerMockRecorder) CreateInstanceFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFile), arg0, arg1, arg2)
}

// CreateInstanceFromBackup mocks base method
func (m *MockInstanceServer) CreateInstanceFromBackup(arg0 client.InstanceBackupArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromBackup", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromBackup indicates an expected call of CreateInstanceFromBackup
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromBackup), arg0)
}

// CreateInstanceFromImage mocks base method
func (m *MockInstanceServer) CreateInstanceFromImage(arg0 client.ImageServer, arg1 api.Image, arg2 api.InstancesPost) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromImage indicates an expected call of CreateInstanceFromImage
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromImage), arg0, arg1, arg2)
}

// CreateInstanceSnapshot mocks base method
func (m *MockInstanceServer) CreateInstanceSnapshot(arg0 string, arg1 api.InstanceSnapshotsPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) CreateInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceSnapshot), arg0, arg1)
}

// CreateInstanceTemplateFile mocks base method
func (m *MockInstanceServer) CreateInstanceTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceTemplateFile indicates an expected call of CreateInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) CreateInstanceTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceTemplateFile), arg0, arg1, arg2)
}

// CreateNetwork mocks base method
func (m *MockInstanceServer) CreateNetwork(arg0 api.NetworksPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork
func (mr *MockInstanceServerMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetwork), arg0)
}

// CreateProfile mocks base method
func (m *MockInstanceServer) CreateProfile(arg0 api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockInstanceServerMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockInstanceServer)(nil).CreateProfile), arg0)
}

// CreateProject mocks base method
func (m *MockInstanceServer) CreateProject(arg0 api.ProjectsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockInstanceServerMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInstanceServer)(nil).CreateProject), arg0)
}

// CreateStoragePool mocks base method
func (m *MockInstanceServer) CreateStoragePool(arg0 api.StoragePoolsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool
func (mr *MockInstanceServerMockRecorder) CreateStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePool), arg0)
}

// CreateStoragePoolVolume mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolume(arg0 string, arg1 api.StorageVolumesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePoolVolume indicates an expected call of CreateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolume), arg0, arg1)
}

// CreateStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2 string, arg3 api.StorageVolumeSnapshotsPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeSnapshot indicates an expected call of CreateStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// DeleteCertificate mocks base method
func (m *MockInstanceServer) DeleteCertificate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate
func (mr *MockInstanceServerMockRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockInstanceServer)(nil).DeleteCertificate), arg0)
}

// DeleteClusterMember mocks base method
func (m *MockInstanceServer) DeleteClusterMember(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterMember indicates an expected call of DeleteClusterMember
func (mr *MockInstanceServerMockRecorder) DeleteClusterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterMember), arg0, arg1)
}

// DeleteContainer mocks base method
func (m *MockInstanceServer) DeleteContainer(arg0 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer
func (mr *MockInstanceServerMockRecorder) DeleteContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainer), arg0)
}

// DeleteContainerBackup mocks base method
func (m *MockInstanceServer) DeleteContainerBackup(arg0, arg1 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerBackup indicates an expected call of DeleteContainerBackup
func (mr *MockInstanceServerMockRecorder) DeleteContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerBackup), arg0, arg1)
}

// DeleteContainerConsoleLog mocks base method
func (m *MockInstanceServer) DeleteContainerConsoleLog(arg0 string, arg1 *client.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerConsoleLog indicates an expected call of DeleteContainerConsoleLog
func (mr *MockInstanceServerMockRecorder) DeleteContainerConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerConsoleLog), arg0, arg1)
}

// DeleteContainerFile mocks base method
func (m *MockInstanceServer) DeleteContainerFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerFile indicates an expected call of DeleteContainerFile
func (mr *MockInstanceServerMockRecorder) DeleteContainerFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerFile), arg0, arg1)
}

// DeleteContainerLogfile mocks base method
func (m *MockInstanceServer) DeleteContainerLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerLogfile indicates an expected call of DeleteContainerLogfile
func (mr *MockInstanceServerMockRecorder) DeleteContainerLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerLogfile), arg0, arg1)
}

// DeleteContainerSnapshot mocks base method
func (m *MockInstanceServer) DeleteContainerSnapshot(arg0, arg1 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerSnapshot indicates an expected call of DeleteContainerSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerSnapshot), arg0, arg1)
}

// DeleteContainerTemplateFile mocks base method
func (m *MockInstanceServer) DeleteContainerTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerTemplateFile indicates an expected call of DeleteContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) DeleteContainerTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerTemplateFile), arg0, arg1)
}

// DeleteImage mocks base method
func (m *MockInstanceServer) DeleteImage(arg0 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockInstanceServerMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImage), arg0)
}

// DeleteImageAlias mocks base method
func (m *MockInstanceServer) DeleteImageAlias(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlias", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlias indicates an expected call of DeleteImageAlias
func (mr *MockInstanceServerMockRecorder) DeleteImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImageAlias), arg0)
}

// DeleteInstance mocks base method
func (m *MockInstanceServer) DeleteInstance(arg0 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockInstanceServerMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstance), arg0)
}

// DeleteInstanceBackup mocks base method
func (m *MockInstanceServer) DeleteInstanceBackup(arg0, arg1 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceBackup indicates an expected call of DeleteInstanceBackup
func (mr *MockInstanceServerMockRecorder) DeleteInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceBackup), arg0, arg1)
}

// DeleteInstanceConsoleLog mocks base method
func (m *MockInstanceServer) DeleteInstanceConsoleLog(arg0 string, arg1 *client.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceConsoleLog indicates an expected call of DeleteInstanceConsoleLog
func (mr *MockInstanceServerMockRecorder) DeleteInstanceConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceConsoleLog), arg0, arg1)
}

// DeleteInstanceFile mocks base method
func (m *MockInstanceServer) DeleteInstanceFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceFile indicates an expected call of DeleteInstanceFile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceFile), arg0, arg1)
}

// DeleteInstanceLogfile mocks base method
func (m *MockInstanceServer) DeleteInstanceLogfile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceLogfile indicates an expected call of DeleteInstanceLogfile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceLogfile), arg0, arg1)
}

// DeleteInstanceSnapshot mocks base method
func (m *MockInstanceServer) DeleteInstanceSnapshot(arg0, arg1 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceSnapshot), arg0, arg1)
}

// DeleteInstanceTemplateFile mocks base method
func (m *MockInstanceServer) DeleteInstanceTemplateFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceTemplateFile indicates an expected call of DeleteInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) DeleteInstanceTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceTemplateFile), arg0, arg1)
}

// DeleteNetwork mocks base method
func (m *MockInstanceServer) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork
func (mr *MockInstanceServerMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetwork), arg0)
}

// DeleteOperation mocks base method
func (m *MockInstanceServer) DeleteOperation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation
func (mr *MockInstanceServerMockRecorder) DeleteOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockInstanceServer)(nil).DeleteOperation), arg0)
}

// DeleteProfile mocks base method
func (m *MockInstanceServer) DeleteProfile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile
func (mr *MockInstanceServerMockRecorder) DeleteProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProfile), arg0)
}

// DeleteProject mocks base method
func (m *MockInstanceServer) DeleteProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockInstanceServerMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProject), arg0)
}

// DeleteStoragePool mocks base method
func (m *MockInstanceServer) DeleteStoragePool(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool
func (mr *MockInstanceServerMockRecorder) DeleteStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePool), arg0)
}

// DeleteStoragePoolVolume mocks base method
func (m *MockInstanceServer) DeleteStoragePoolVolume(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolume), arg0, arg1, arg2)
}

// DeleteStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeSnapshot indicates an expected call of DeleteStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// ExecContainer mocks base method
func (m *MockInstanceServer) ExecContainer(arg0 string, arg1 api.InstanceExecPost, arg2 *client.InstanceExecArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContainer indicates an expected call of ExecContainer
func (mr *MockInstanceServerMockRecorder) ExecContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContainer", reflect.TypeOf((*MockInstanceServer)(nil).ExecContainer), arg0, arg1, arg2)
}

// ExecInstance mocks base method
func (m *MockInstanceServer) ExecInstance(arg0 string, arg1 api.InstanceExecPost, arg2 *client.InstanceExecArgs) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecInstance indicates an expected call of ExecInstance
func (mr *MockInstanceServerMockRecorder) ExecInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInstance", reflect.TypeOf((*MockInstanceServer)(nil).ExecInstance), arg0, arg1, arg2)
}

// GetCertificate mocks base method
func (m *MockInstanceServer) GetCertificate(arg0 string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate
func (mr *MockInstanceServerMockRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificate), arg0)
}

// GetCertificateFingerprints mocks base method
func (m *MockInstanceServer) GetCertificateFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFingerprints indicates an expected call of GetCertificateFingerprints
func (mr *MockInstanceServerMockRecorder) GetCertificateFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificateFingerprints))
}

// GetCertificates mocks base method
func (m *MockInstanceServer) GetCertificates() ([]api.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]api.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates
func (mr *MockInstanceServerMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificates))
}

// GetCluster mocks base method
func (m *MockInstanceServer) GetCluster() (*api.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*api.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockInstanceServerMockRecorder) GetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceServer)(nil).GetCluster))
}

// GetClusterMember mocks base method
func (m *MockInstanceServer) GetClusterMember(arg0 string) (*api.ClusterMember, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMember", arg0)
	ret0, _ := ret[0].(*api.ClusterMember)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMember indicates an expected call of GetClusterMember
func (mr *MockInstanceServerMockRecorder) GetClusterMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMember), arg0)
}

// GetClusterMemberNames mocks base method
func (m *MockInstanceServer) GetClusterMemberNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMemberNames indicates an expected call of GetClusterMemberNames
func (mr *MockInstanceServerMockRecorder) GetClusterMemberNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberNames))
}

// GetClusterMembers mocks base method
func (m *MockInstanceServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers
func (mr *MockInstanceServerMockRecorder) GetClusterMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMembers))
}

// GetConnectionInfo mocks base method
func (m *MockInstanceServer) GetConnectionInfo() (*client.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*client.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo
func (mr *MockInstanceServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetConnectionInfo))
}

// GetContainer mocks base method
func (m *MockInstanceServer) GetContainer(arg0 string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainer indicates an expected call of GetContainer
func (mr *MockInstanceServerMockRecorder) GetContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockInstanceServer)(nil).GetContainer), arg0)
}

// GetContainerBackup mocks base method
func (m *MockInstanceServer) GetContainerBackup(arg0, arg1 string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerBackup indicates an expected call of GetContainerBackup
func (mr *MockInstanceServerMockRecorder) GetContainerBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackup), arg0, arg1)
}

// GetContainerBackupFile mocks base method
func (m *MockInstanceServer) GetContainerBackupFile(arg0, arg1 string, arg2 *client.BackupFileRequest) (*client.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupFile indicates an expected call of GetContainerBackupFile
func (mr *MockInstanceServerMockRecorder) GetContainerBackupFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupFile), arg0, arg1, arg2)
}

// GetContainerBackupNames mocks base method
func (m *MockInstanceServer) GetContainerBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupNames indicates an expected call of GetContainerBackupNames
func (mr *MockInstanceServerMockRecorder) GetContainerBackupNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupNames), arg0)
}

// GetContainerBackups mocks base method
func (m *MockInstanceServer) GetContainerBackups(arg0 string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackups", arg0)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackups indicates an expected call of GetContainerBackups
func (mr *MockInstanceServerMockRecorder) GetContainerBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackups), arg0)
}

// GetContainerConsoleLog mocks base method
func (m *MockInstanceServer) GetContainerConsoleLog(arg0 string, arg1 *client.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerConsoleLog indicates an expected call of GetContainerConsoleLog
func (mr *MockInstanceServerMockRecorder) GetContainerConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerConsoleLog), arg0, arg1)
}

// GetContainerFile mocks base method
func (m *MockInstanceServer) GetContainerFile(arg0, arg1 string) (io.ReadCloser, *client.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*client.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerFile indicates an expected call of GetContainerFile
func (mr *MockInstanceServerMockRecorder) GetContainerFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerFile), arg0, arg1)
}

// GetContainerLogfile mocks base method
func (m *MockInstanceServer) GetContainerLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfile indicates an expected call of GetContainerLogfile
func (mr *MockInstanceServerMockRecorder) GetContainerLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfile), arg0, arg1)
}

// GetContainerLogfiles mocks base method
func (m *MockInstanceServer) GetContainerLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfiles indicates an expected call of GetContainerLogfiles
func (mr *MockInstanceServerMockRecorder) GetContainerLogfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfiles), arg0)
}

// GetContainerMetadata mocks base method
func (m *MockInstanceServer) GetContainerMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata
func (mr *MockInstanceServerMockRecorder) GetContainerMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerMetadata), arg0)
}

// GetContainerNames mocks base method
func (m *MockInstanceServer) GetContainerNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNames indicates an expected call of GetContainerNames
func (mr *MockInstanceServerMockRecorder) GetContainerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerNames))
}

// GetContainerSnapshot mocks base method
func (m *MockInstanceServer) GetContainerSnapshot(arg0, arg1 string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSnapshot indicates an expected call of GetContainerSnapshot
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshot), arg0, arg1)
}

// GetContainerSnapshotNames mocks base method
func (m *MockInstanceServer) GetContainerSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshotNames indicates an expected call of GetContainerSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshotNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshotNames), arg0)
}

// GetContainerSnapshots mocks base method
func (m *MockInstanceServer) GetContainerSnapshots(arg0 string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshots", arg0)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshots indicates an expected call of GetContainerSnapshots
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshots), arg0)
}

// GetContainerState mocks base method
func (m *MockInstanceServer) GetContainerState(arg0 string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerState", arg0)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerState indicates an expected call of GetContainerState
func (mr *MockInstanceServerMockRecorder) GetContainerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerState", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerState), arg0)
}

// GetContainerTemplateFile mocks base method
func (m *MockInstanceServer) GetContainerTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFile indicates an expected call of GetContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFile), arg0, arg1)
}

// GetContainerTemplateFiles mocks base method
func (m *MockInstanceServer) GetContainerTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFiles indicates an expected call of GetContainerTemplateFiles
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFiles), arg0)
}

// GetContainers mocks base method
func (m *MockInstanceServer) GetContainers() ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers
func (mr *MockInstanceServerMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockInstanceServer)(nil).GetContainers))
}

// GetContainersFull mocks base method
func (m *MockInstanceServer) GetContainersFull() ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersFull")
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersFull indicates an expected call of GetContainersFull
func (mr *MockInstanceServerMockRecorder) GetContainersFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersFull", reflect.TypeOf((*MockInstanceServer)(nil).GetContainersFull))
}

// GetEvents mocks base method
func (m *MockInstanceServer) GetEvents() (*client.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].(*client.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockInstanceServerMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockInstanceServer)(nil).GetEvents))
}

// GetHTTPClient mocks base method
func (m *MockInstanceServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient
func (mr *MockInstanceServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockInstanceServer)(nil).GetHTTPClient))
}

// GetImage mocks base method
func (m *MockInstanceServer) GetImage(arg0 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage
func (mr *MockInstanceServerMockRecorder) GetImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockInstanceServer)(nil).GetImage), arg0)
}

// GetImageAlias mocks base method
func (m *MockInstanceServer) GetImageAlias(arg0 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", arg0)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias
func (mr *MockInstanceServerMockRecorder) GetImageAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAlias), arg0)
}

// GetImageAliasNames mocks base method
func (m *MockInstanceServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames
func (mr *MockInstanceServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasNames))
}

// GetImageAliasType mocks base method
func (m *MockInstanceServer) GetImageAliasType(arg0, arg1 string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", arg0, arg1)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType
func (mr *MockInstanceServerMockRecorder) GetImageAliasType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasType), arg0, arg1)
}

// GetImageAliases mocks base method
func (m *MockInstanceServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases
func (mr *MockInstanceServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliases))
}

// GetImageFile mocks base method
func (m *MockInstanceServer) GetImageFile(arg0 string, arg1 client.ImageFileRequest) (*client.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", arg0, arg1)
	ret0, _ := ret[0].(*client.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile
func (mr *MockInstanceServerMockRecorder) GetImageFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFile), arg0, arg1)
}

// GetImageFingerprints mocks base method
func (m *MockInstanceServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints
func (mr *MockInstanceServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFingerprints))
}

// GetImageSecret mocks base method
func (m *MockInstanceServer) GetImageSecret(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret
func (mr *MockInstanceServerMockRecorder) GetImageSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetImageSecret), arg0)
}

// GetImages mocks base method
func (m *MockInstanceServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockInstanceServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockInstanceServer)(nil).GetImages))
}

// GetInstance mocks base method
func (m *MockInstanceServer) GetInstance(arg0 string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockInstanceServerMockRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceServer)(nil).GetInstance), arg0)
}

// GetInstanceBackup mocks base method
func (m *MockInstanceServer) GetInstanceBackup(arg0, arg1 string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceBackup indicates an expected call of GetInstanceBackup
func (mr *MockInstanceServerMockRecorder) GetInstanceBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackup), arg0, arg1)
}

// GetInstanceBackupFile mocks base method
func (m *MockInstanceServer) GetInstanceBackupFile(arg0, arg1 string, arg2 *client.BackupFileRequest) (*client.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupFile indicates an expected call of GetInstanceBackupFile
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupFile), arg0, arg1, arg2)
}

// GetInstanceBackupNames mocks base method
func (m *MockInstanceServer) GetInstanceBackupNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupNames indicates an expected call of GetInstanceBackupNames
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupNames), arg0)
}

// GetInstanceBackups mocks base method
func (m *MockInstanceServer) GetInstanceBackups(arg0 string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackups", arg0)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackups indicates an expected call of GetInstanceBackups
func (mr *MockInstanceServerMockRecorder) GetInstanceBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackups), arg0)
}

// GetInstanceConsoleLog mocks base method
func (m *MockInstanceServer) GetInstanceConsoleLog(arg0 string, arg1 *client.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConsoleLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConsoleLog indicates an expected call of GetInstanceConsoleLog
func (mr *MockInstanceServerMockRecorder) GetInstanceConsoleLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceConsoleLog), arg0, arg1)
}

// GetInstanceFile mocks base method
func (m *MockInstanceServer) GetInstanceFile(arg0, arg1 string) (io.ReadCloser, *client.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*client.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFile indicates an expected call of GetInstanceFile
func (mr *MockInstanceServerMockRecorder) GetInstanceFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFile), arg0, arg1)
}

// GetInstanceLogfile mocks base method
func (m *MockInstanceServer) GetInstanceLogfile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfile indicates an expected call of GetInstanceLogfile
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfile), arg0, arg1)
}

// GetInstanceLogfiles mocks base method
func (m *MockInstanceServer) GetInstanceLogfiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfiles indicates an expected call of GetInstanceLogfiles
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfiles), arg0)
}

// GetInstanceMetadata mocks base method
func (m *MockInstanceServer) GetInstanceMetadata(arg0 string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetadata", arg0)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceMetadata indicates an expected call of GetInstanceMetadata
func (mr *MockInstanceServerMockRecorder) GetInstanceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceMetadata), arg0)
}

// GetInstanceNames mocks base method
func (m *MockInstanceServer) GetInstanceNames(arg0 api.InstanceType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNames indicates an expected call of GetInstanceNames
func (mr *MockInstanceServerMockRecorder) GetInstanceNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNames), arg0)
}

// GetInstanceSnapshot mocks base method
func (m *MockInstanceServer) GetInstanceSnapshot(arg0, arg1 string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshot), arg0, arg1)
}

// GetInstanceSnapshotNames mocks base method
func (m *MockInstanceServer) GetInstanceSnapshotNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotNames indicates an expected call of GetInstanceSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshotNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshotNames), arg0)
}

// GetInstanceSnapshots mocks base method
func (m *MockInstanceServer) GetInstanceSnapshots(arg0 string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", arg0)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshots), arg0)
}

// GetInstanceState mocks base method
func (m *MockInstanceServer) GetInstanceState(arg0 string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", arg0)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState
func (mr *MockInstanceServerMockRecorder) GetInstanceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceState), arg0)
}

// GetInstanceTemplateFile mocks base method
func (m *MockInstanceServer) GetInstanceTemplateFile(arg0, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFile indicates an expected call of GetInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFile), arg0, arg1)
}

// GetInstanceTemplateFiles mocks base method
func (m *MockInstanceServer) GetInstanceTemplateFiles(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFiles indicates an expected call of GetInstanceTemplateFiles
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFiles), arg0)
}

// GetInstances mocks base method
func (m *MockInstanceServer) GetInstances(arg0 api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", arg0)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockInstanceServerMockRecorder) GetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceServer)(nil).GetInstances), arg0)
}

// GetInstancesFull mocks base method
func (m *MockInstanceServer) GetInstancesFull(arg0 api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFull", arg0)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFull indicates an expected call of GetInstancesFull
func (mr *MockInstanceServerMockRecorder) GetInstancesFull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFull), arg0)
}

// GetNetwork mocks base method
func (m *MockInstanceServer) GetNetwork(arg0 string) (*api.Network, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(*api.Network)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetwork indicates an expected call of GetNetwork
func (mr *MockInstanceServerMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockInstanceServer)(nil).GetNetwork), arg0)
}

// GetNetworkLeases mocks base method
func (m *MockInstanceServer) GetNetworkLeases(arg0 string) ([]api.NetworkLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLeases", arg0)
	ret0, _ := ret[0].([]api.NetworkLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLeases indicates an expected call of GetNetworkLeases
func (mr *MockInstanceServerMockRecorder) GetNetworkLeases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLeases", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLeases), arg0)
}

// GetNetworkNames mocks base method
func (m *MockInstanceServer) GetNetworkNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames
func (mr *MockInstanceServerMockRecorder) GetNetworkNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkNames))
}

// GetNetworkState mocks base method
func (m *MockInstanceServer) GetNetworkState(arg0 string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", arg0)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState
func (mr *MockInstanceServerMockRecorder) GetNetworkState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkState), arg0)
}

// GetNetworks mocks base method
func (m *MockInstanceServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks
func (mr *MockInstanceServerMockRecorder) GetNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworks))
}

// GetOperation mocks base method
func (m *MockInstanceServer) GetOperation(arg0 string) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperation indicates an expected call of GetOperation
func (mr *MockInstanceServerMockRecorder) GetOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceServer)(nil).GetOperation), arg0)
}

// GetOperationUUIDs mocks base method
func (m *MockInstanceServer) GetOperationUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationUUIDs indicates an expected call of GetOperationUUIDs
func (mr *MockInstanceServerMockRecorder) GetOperationUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationUUIDs))
}

// GetOperationWait mocks base method
func (m *MockInstanceServer) GetOperationWait(arg0 string, arg1 int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWait", arg0, arg1)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWait indicates an expected call of GetOperationWait
func (mr *MockInstanceServerMockRecorder) GetOperationWait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWait", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWait), arg0, arg1)
}

// GetOperationWebsocket mocks base method
func (m *MockInstanceServer) GetOperationWebsocket(arg0, arg1 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWebsocket", arg0, arg1)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWebsocket indicates an expected call of GetOperationWebsocket
func (mr *MockInstanceServerMockRecorder) GetOperationWebsocket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWebsocket), arg0, arg1)
}

// GetOperations mocks base method
func (m *MockInstanceServer) GetOperations() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations
func (mr *MockInstanceServerMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockInstanceServer)(nil).GetOperations))
}

// GetPrivateImage mocks base method
func (m *MockInstanceServer) GetPrivateImage(arg0, arg1 string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", arg0, arg1)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage
func (mr *MockInstanceServerMockRecorder) GetPrivateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImage), arg0, arg1)
}

// GetPrivateImageFile mocks base method
func (m *MockInstanceServer) GetPrivateImageFile(arg0, arg1 string, arg2 client.ImageFileRequest) (*client.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*client.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile
func (mr *MockInstanceServerMockRecorder) GetPrivateImageFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImageFile), arg0, arg1, arg2)
}

// GetProfile mocks base method
func (m *MockInstanceServer) GetProfile(arg0 string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockInstanceServerMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockInstanceServer)(nil).GetProfile), arg0)
}

// GetProfileNames mocks base method
func (m *MockInstanceServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames
func (mr *MockInstanceServerMockRecorder) GetProfileNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProfileNames))
}

// GetProfiles mocks base method
func (m *MockInstanceServer) GetProfiles() ([]api.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles")
	ret0, _ := ret[0].([]api.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles
func (mr *MockInstanceServerMockRecorder) GetProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetProfiles))
}

// GetProject mocks base method
func (m *MockInstanceServer) GetProject(arg0 string) (*api.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*api.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject
func (mr *MockInstanceServerMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInstanceServer)(nil).GetProject), arg0)
}

// GetProjectNames mocks base method
func (m *MockInstanceServer) GetProjectNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNames indicates an expected call of GetProjectNames
func (mr *MockInstanceServerMockRecorder) GetProjectNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectNames))
}

// GetProjects mocks base method
func (m *MockInstanceServer) GetProjects() ([]api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockInstanceServerMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetProjects))
}

// GetServer mocks base method
func (m *MockInstanceServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer
func (mr *MockInstanceServerMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstanceServer)(nil).GetServer))
}

// GetServerResources mocks base method
func (m *MockInstanceServer) GetServerResources() (*api.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerResources")
	ret0, _ := ret[0].(*api.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerResources indicates an expected call of GetServerResources
func (mr *MockInstanceServerMockRecorder) GetServerResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerResources", reflect.TypeOf((*MockInstanceServer)(nil).GetServerResources))
}

// GetStoragePool mocks base method
func (m *MockInstanceServer) GetStoragePool(arg0 string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", arg0)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool
func (mr *MockInstanceServerMockRecorder) GetStoragePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePool), arg0)
}

// GetStoragePoolNames mocks base method
func (m *MockInstanceServer) GetStoragePoolNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolNames indicates an expected call of GetStoragePoolNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolNames))
}

// GetStoragePoolResources mocks base method
func (m *MockInstanceServer) GetStoragePoolResources(arg0 string) (*api.ResourcesStoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolResources", arg0)
	ret0, _ := ret[0].(*api.ResourcesStoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolResources indicates an expected call of GetStoragePoolResources
func (mr *MockInstanceServerMockRecorder) GetStoragePoolResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolResources", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolResources), arg0)
}

// GetStoragePoolVolume mocks base method
func (m *MockInstanceServer) GetStoragePoolVolume(arg0, arg1, arg2 string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolume), arg0, arg1, arg2)
}

// GetStoragePoolVolumeNames mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeNames(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNames indicates an expected call of GetStoragePoolVolumeNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNames), arg0)
}

// GetStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string) (*api.StorageVolumeSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeSnapshot indicates an expected call of GetStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3)
}

// GetStoragePoolVolumeSnapshotNames mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshotNames", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshotNames indicates an expected call of GetStoragePoolVolumeSnapshotNames
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshotNames(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshotNames), arg0, arg1, arg2)
}

// GetStoragePoolVolumeSnapshots mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 string) ([]api.StorageVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].([]api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshots indicates an expected call of GetStoragePoolVolumeSnapshots
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshots), arg0, arg1, arg2)
}

// GetStoragePoolVolumes mocks base method
func (m *MockInstanceServer) GetStoragePoolVolumes(arg0 string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", arg0)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumes), arg0)
}

// GetStoragePools mocks base method
func (m *MockInstanceServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools
func (mr *MockInstanceServerMockRecorder) GetStoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePools))
}

// HasExtension mocks base method
func (m *MockInstanceServer) HasExtension(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension
func (mr *MockInstanceServerMockRecorder) HasExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockInstanceServer)(nil).HasExtension), arg0)
}

// IsClustered mocks base method
func (m *MockInstanceServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered
func (mr *MockInstanceServerMockRecorder) IsClustered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockInstanceServer)(nil).IsClustered))
}

// MigrateContainer mocks base method
func (m *MockInstanceServer) MigrateContainer(arg0 string, arg1 api.InstancePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainer", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainer indicates an expected call of MigrateContainer
func (mr *MockInstanceServerMockRecorder) MigrateContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainer", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainer), arg0, arg1)
}

// MigrateContainerSnapshot mocks base method
func (m *MockInstanceServer) MigrateContainerSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainerSnapshot indicates an expected call of MigrateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) MigrateContainerSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainerSnapshot), arg0, arg1, arg2)
}

// MigrateInstance mocks base method
func (m *MockInstanceServer) MigrateInstance(arg0 string, arg1 api.InstancePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance
func (mr *MockInstanceServerMockRecorder) MigrateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstance), arg0, arg1)
}

// MigrateInstanceSnapshot mocks base method
func (m *MockInstanceServer) MigrateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstanceSnapshot indicates an expected call of MigrateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) MigrateInstanceSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstanceSnapshot), arg0, arg1, arg2)
}

// MigrateStoragePoolVolume mocks base method
func (m *MockInstanceServer) MigrateStoragePoolVolume(arg0 string, arg1 api.StorageVolumePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateStoragePoolVolume", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateStoragePoolVolume indicates an expected call of MigrateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) MigrateStoragePoolVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MigrateStoragePoolVolume), arg0, arg1)
}

// MoveStoragePoolVolume mocks base method
func (m *MockInstanceServer) MoveStoragePoolVolume(arg0 string, arg1 client.InstanceServer, arg2 string, arg3 api.StorageVolume, arg4 *client.StoragePoolVolumeMoveArgs) (client.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(client.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStoragePoolVolume indicates an expected call of MoveStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) MoveStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MoveStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// RawOperation mocks base method
func (m *MockInstanceServer) RawOperation(arg0, arg1 string, arg2 interface{}, arg3 string) (client.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawOperation indicates an expected call of RawOperation
func (mr *MockInstanceServerMockRecorder) RawOperation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawOperation", reflect.TypeOf((*MockInstanceServer)(nil).RawOperation), arg0, arg1, arg2, arg3)
}

// RawQuery mocks base method
func (m *MockInstanceServer) RawQuery(arg0, arg1 string, arg2 interface{}, arg3 string) (*api.Response, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawQuery indicates an expected call of RawQuery
func (mr *MockInstanceServerMockRecorder) RawQuery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockInstanceServer)(nil).RawQuery), arg0, arg1, arg2, arg3)
}

// RawWebsocket mocks base method
func (m *MockInstanceServer) RawWebsocket(arg0 string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawWebsocket", arg0)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawWebsocket indicates an expected call of RawWebsocket
func (mr *MockInstanceServerMockRecorder) RawWebsocket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).RawWebsocket), arg0)
}

// RefreshImage mocks base method
func (m *MockInstanceServer) RefreshImage(arg0 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImage", arg0)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshImage indicates an expected call of RefreshImage
func (mr *MockInstanceServerMockRecorder) RefreshImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImage", reflect.TypeOf((*MockInstanceServer)(nil).RefreshImage), arg0)
}

// RenameClusterMember mocks base method
func (m *MockInstanceServer) RenameClusterMember(arg0 string, arg1 api.ClusterMemberPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterMember indicates an expected call of RenameClusterMember
func (mr *MockInstanceServerMockRecorder) RenameClusterMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterMember), arg0, arg1)
}

// RenameContainer mocks base method
func (m *MockInstanceServer) RenameContainer(arg0 string, arg1 api.InstancePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainer indicates an expected call of RenameContainer
func (mr *MockInstanceServerMockRecorder) RenameContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainer), arg0, arg1)
}

// RenameContainerBackup mocks base method
func (m *MockInstanceServer) RenameContainerBackup(arg0, arg1 string, arg2 api.InstanceBackupPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerBackup indicates an expected call of RenameContainerBackup
func (mr *MockInstanceServerMockRecorder) RenameContainerBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerBackup), arg0, arg1, arg2)
}

// RenameContainerSnapshot mocks base method
func (m *MockInstanceServer) RenameContainerSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerSnapshot indicates an expected call of RenameContainerSnapshot
func (mr *MockInstanceServerMockRecorder) RenameContainerSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerSnapshot), arg0, arg1, arg2)
}

// RenameImageAlias mocks base method
func (m *MockInstanceServer) RenameImageAlias(arg0 string, arg1 api.ImageAliasesEntryPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImageAlias", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImageAlias indicates an expected call of RenameImageAlias
func (mr *MockInstanceServerMockRecorder) RenameImageAlias(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).RenameImageAlias), arg0, arg1)
}

// RenameInstance mocks base method
func (m *MockInstanceServer) RenameInstance(arg0 string, arg1 api.InstancePost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstance", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstance indicates an expected call of RenameInstance
func (mr *MockInstanceServerMockRecorder) RenameInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstance", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstance), arg0, arg1)
}

// RenameInstanceBackup mocks base method
func (m *MockInstanceServer) RenameInstanceBackup(arg0, arg1 string, arg2 api.InstanceBackupPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceBackup indicates an expected call of RenameInstanceBackup
func (mr *MockInstanceServerMockRecorder) RenameInstanceBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceBackup), arg0, arg1, arg2)
}

// RenameInstanceSnapshot mocks base method
func (m *MockInstanceServer) RenameInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceSnapshot indicates an expected call of RenameInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) RenameInstanceSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceSnapshot), arg0, arg1, arg2)
}

// RenameNetwork mocks base method
func (m *MockInstanceServer) RenameNetwork(arg0 string, arg1 api.NetworkPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetwork", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetwork indicates an expected call of RenameNetwork
func (mr *MockInstanceServerMockRecorder) RenameNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetwork", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetwork), arg0, arg1)
}

// RenameProfile mocks base method
func (m *MockInstanceServer) RenameProfile(arg0 string, arg1 api.ProfilePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile
func (mr *MockInstanceServerMockRecorder) RenameProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockInstanceServer)(nil).RenameProfile), arg0, arg1)
}

// RenameProject mocks base method
func (m *MockInstanceServer) RenameProject(arg0 string, arg1 api.ProjectPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProject", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameProject indicates an expected call of RenameProject
func (mr *MockInstanceServerMockRecorder) RenameProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProject", reflect.TypeOf((*MockInstanceServer)(nil).RenameProject), arg0, arg1)
}

// RenameStoragePoolVolume mocks base method
func (m *MockInstanceServer) RenameStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameStoragePoolVolume indicates an expected call of RenameStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolume), arg0, arg1, arg2, arg3)
}

// RenameStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPost) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeSnapshot indicates an expected call of RenameStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// RequireAuthenticated mocks base method
func (m *MockInstanceServer) RequireAuthenticated(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthenticated", arg0)
}

// RequireAuthenticated indicates an expected call of RequireAuthenticated
func (mr *MockInstanceServerMockRecorder) RequireAuthenticated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticated", reflect.TypeOf((*MockInstanceServer)(nil).RequireAuthenticated), arg0)
}

// SetContainerMetadata mocks base method
func (m *MockInstanceServer) SetContainerMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata
func (mr *MockInstanceServerMockRecorder) SetContainerMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetContainerMetadata), arg0, arg1, arg2)
}

// SetInstanceMetadata mocks base method
func (m *MockInstanceServer) SetInstanceMetadata(arg0 string, arg1 api.ImageMetadata, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceMetadata indicates an expected call of SetInstanceMetadata
func (mr *MockInstanceServerMockRecorder) SetInstanceMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetInstanceMetadata), arg0, arg1, arg2)
}

// UpdateCertificate mocks base method
func (m *MockInstanceServer) UpdateCertificate(arg0 string, arg1 api.CertificatePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificate indicates an expected call of UpdateCertificate
func (mr *MockInstanceServerMockRecorder) UpdateCertificate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCertificate), arg0, arg1, arg2)
}

// UpdateCluster mocks base method
func (m *MockInstanceServer) UpdateCluster(arg0 api.ClusterPut, arg1 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster
func (mr *MockInstanceServerMockRecorder) UpdateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCluster), arg0, arg1)
}

// UpdateContainer mocks base method
func (m *MockInstanceServer) UpdateContainer(arg0 string, arg1 api.InstancePut, arg2 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer
func (mr *MockInstanceServerMockRecorder) UpdateContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainer), arg0, arg1, arg2)
}

// UpdateContainerSnapshot mocks base method
func (m *MockInstanceServer) UpdateContainerSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPut, arg3 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerSnapshot indicates an expected call of UpdateContainerSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateContainerSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerSnapshot), arg0, arg1, arg2, arg3)
}

// UpdateContainerState mocks base method
func (m *MockInstanceServer) UpdateContainerState(arg0 string, arg1 api.InstanceStatePut, arg2 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerState", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerState indicates an expected call of UpdateContainerState
func (mr *MockInstanceServerMockRecorder) UpdateContainerState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerState), arg0, arg1, arg2)
}

// UpdateContainerTemplateFile mocks base method
func (m *MockInstanceServer) UpdateContainerTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerTemplateFile indicates an expected call of UpdateContainerTemplateFile
func (mr *MockInstanceServerMockRecorder) UpdateContainerTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerTemplateFile), arg0, arg1, arg2)
}

// UpdateImage mocks base method
func (m *MockInstanceServer) UpdateImage(arg0 string, arg1 api.ImagePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockInstanceServerMockRecorder) UpdateImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImage), arg0, arg1, arg2)
}

// UpdateImageAlias mocks base method
func (m *MockInstanceServer) UpdateImageAlias(arg0 string, arg1 api.ImageAliasesEntryPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageAlias indicates an expected call of UpdateImageAlias
func (mr *MockInstanceServerMockRecorder) UpdateImageAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImageAlias), arg0, arg1, arg2)
}

// UpdateInstance mocks base method
func (m *MockInstanceServer) UpdateInstance(arg0 string, arg1 api.InstancePut, arg2 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockInstanceServerMockRecorder) UpdateInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstance), arg0, arg1, arg2)
}

// UpdateInstanceSnapshot mocks base method
func (m *MockInstanceServer) UpdateInstanceSnapshot(arg0, arg1 string, arg2 api.InstanceSnapshotPut, arg3 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceSnapshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceSnapshot indicates an expected call of UpdateInstanceSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateInstanceSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceSnapshot), arg0, arg1, arg2, arg3)
}

// UpdateInstanceState mocks base method
func (m *MockInstanceServer) UpdateInstanceState(arg0 string, arg1 api.InstanceStatePut, arg2 string) (client.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceState", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceState indicates an expected call of UpdateInstanceState
func (mr *MockInstanceServerMockRecorder) UpdateInstanceState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceState), arg0, arg1, arg2)
}

// UpdateInstanceTemplateFile mocks base method
func (m *MockInstanceServer) UpdateInstanceTemplateFile(arg0, arg1 string, arg2 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceTemplateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceTemplateFile indicates an expected call of UpdateInstanceTemplateFile
func (mr *MockInstanceServerMockRecorder) UpdateInstanceTemplateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceTemplateFile), arg0, arg1, arg2)
}

// UpdateNetwork mocks base method
func (m *MockInstanceServer) UpdateNetwork(arg0 string, arg1 api.NetworkPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetwork indicates an expected call of UpdateNetwork
func (mr *MockInstanceServerMockRecorder) UpdateNetwork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetwork), arg0, arg1, arg2)
}

// UpdateProfile mocks base method
func (m *MockInstanceServer) UpdateProfile(arg0 string, arg1 api.ProfilePut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockInstanceServerMockRecorder) UpdateProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProfile), arg0, arg1, arg2)
}

// UpdateProject mocks base method
func (m *MockInstanceServer) UpdateProject(arg0 string, arg1 api.ProjectPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockInstanceServerMockRecorder) UpdateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProject), arg0, arg1, arg2)
}

// UpdateServer mocks base method
func (m *MockInstanceServer) UpdateServer(arg0 api.ServerPut, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer
func (mr *MockInstanceServerMockRecorder) UpdateServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateServer), arg0, arg1)
}

// UpdateStoragePool mocks base method
func (m *MockInstanceServer) UpdateStoragePool(arg0 string, arg1 api.StoragePoolPut, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePool", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePool indicates an expected call of UpdateStoragePool
func (mr *MockInstanceServerMockRecorder) UpdateStoragePool(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePool), arg0, arg1, arg2)
}

// UpdateStoragePoolVolume mocks base method
func (m *MockInstanceServer) UpdateStoragePoolVolume(arg0, arg1, arg2 string, arg3 api.StorageVolumePut, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolume(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolume), arg0, arg1, arg2, arg3, arg4)
}

// UpdateStoragePoolVolumeSnapshot mocks base method
func (m *MockInstanceServer) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3 string, arg4 api.StorageVolumeSnapshotPut, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolumeSnapshot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolumeSnapshot indicates an expected call of UpdateStoragePoolVolumeSnapshot
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolumeSnapshot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolumeSnapshot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UseProject mocks base method
func (m *MockInstanceServer) UseProject(arg0 string) client.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseProject", arg0)
	ret0, _ := ret[0].(client.InstanceServer)
	return ret0
}

// UseProject indicates an expected call of UseProject
func (mr *MockInstanceServerMockRecorder) UseProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockInstanceServer)(nil).UseProject), arg0)
}

// UseTarget mocks base method
func (m *MockInstanceServer) UseTarget(arg0 string) client.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTarget", arg0)
	ret0, _ := ret[0].(client.InstanceServer)
	return ret0
}

// UseTarget indicates an expected call of UseTarget
func (mr *MockInstanceServerMockRecorder) UseTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTarget", reflect.TypeOf((*MockInstanceServer)(nil).UseTarget), arg0)
}
